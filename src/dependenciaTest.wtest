import dependencias.*
import rodados.*

describe "Test de Dependencias" {
	const deportes = new Dependencia(cantidadEmpleado = 45)
	const cultura = new Dependencia(cantidadEmpleado = 31)
	method initialize() { // metodo que se ejecutara cuando arranquen los test
		const cachito = new Corsa(color='rojo')
		deportes.agregarAFlota(cachito)
		cultura.agregarAFlota(cachito)
		deportes.agregarAFlota(new Corsa(color='azul'))
		deportes.agregarAFlota(new Corsa(color='verde'))
		deportes.agregarAFlota(new Kwid(tieneTanqueAdicional = true))
		deportes.agregarAFlota(
			new AutoEspecial(capacidad= 5, velocidad=160, peso= 1200, color= 'beige')
		)
		cultura.agregarAFlota(new Kwid(tieneTanqueAdicional = true))
		cultura.agregarAFlota(new Kwid(tieneTanqueAdicional = true))
		cultura.agregarAFlota(new Kwid())
		traffic.configurar(interiorPopular,motorBataton)
		cultura.agregarAFlota(traffic)
	}
	
test "peso total de la flota de Deporte" {
	assert.equals(1300*3 + 1350 + 1200 , deportes.pesoTotalFlota())

}
test "peso total de la flota de Cultura" {
	assert.equals(1300 + 1350 *2 + 1200 + 5500 , cultura.pesoTotalFlota())

}	

test "esta bien equipada Deporte"{
	assert.that(deportes.estaBienEquipada())
}

test "No esta bien equipada Cultura"{
	assert.notThat(cultura.estaBienEquipada())
}		

test "capacidad total de deporte en color azul" {
	assert.equals(7,deportes.capacidadTotalEnColor('azul'))
}

test "capacidad total de cultura en color azul" {
	assert.equals(10,cultura.capacidadTotalEnColor('azul'))
	}
test "capacidad Fatantes en deportes" {
	assert.equals(25,deportes.capacidadFaltante())
}
test "capacidad Fatantes en cultura" {
	assert.equals(5,cultura.capacidadFaltante())
}

}

